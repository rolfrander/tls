package org.pvv.rolfn.tls.protocol.record;

import static org.junit.Assert.*;

import java.nio.ByteBuffer;
import java.security.cert.X509Certificate;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.pvv.rolfn.TestUtils;

public class CertificateTest extends HandshakeTest {

	private static final String AUTHORITY_DN = "CN=Google Internet Authority G2, O=Google Inc, C=US";
	public static final String TLS_HANDSHAKE_PREFIX_HEX = "0b000e1a";
	public static final String TLS_CERT_GOOGLE_HEX =  "000e170006853082068130820569a00302010202080fe2fcd22bcfa218300d06092a864886f70d01010505003049310b300906035504061302555331133011060355040a130a476f6f676c6520496e63312530230603550403131c476f6f676c6520496e7465726e657420417574686f72697479204732301e170d3134303232353134313531335a170d3134303532363030303030305a3066310b30090603550406130255533113301106035504080c0a43616c69666f726e69613116301406035504070c0d4d6f756e7461696e205669657731133011060355040a0c0a476f6f676c6520496e633115301306035504030c0c2a2e676f6f676c652e636f6d3059301306072a8648ce3d020106082a8648ce3d030107034200045107a3d1495aa0cc8530949971605e1f62e57f2652285fc2fa033d51e3f1d05a39f6390647f1cb064edde4dab3f0a3383bb5f9d6ab5032b187b6b7acb3a9e318a382041930820415301d0603551d250416301406082b0601050507030106082b06010505070302308202e20603551d11048202d9308202d5820c2a2e676f6f676c652e636f6d820d2a2e616e64726f69642e636f6d82162a2e617070656e67696e652e676f6f676c652e636f6d82122a2e636c6f75642e676f6f676c652e636f6d82162a2e676f6f676c652d616e616c79746963732e636f6d820b2a2e676f6f676c652e6361820b2a2e676f6f676c652e636c820e2a2e676f6f676c652e636f2e696e820e2a2e676f6f676c652e636f2e6a70820e2a2e676f6f676c652e636f2e756b820f2a2e676f6f676c652e636f6d2e6172820f2a2e676f6f676c652e636f6d2e6175820f2a2e676f6f676c652e636f6d2e6272820f2a2e676f6f676c652e636f6d2e636f820f2a2e676f6f676c652e636f6d2e6d78820f2a2e676f6f676c652e636f6d2e7472820f2a2e676f6f676c652e636f6d2e766e820b2a2e676f6f676c652e6465820b2a2e676f6f676c652e6573820b2a2e676f6f676c652e6672820b2a2e676f6f676c652e6875820b2a2e676f6f676c652e6974820b2a2e676f6f676c652e6e6c820b2a2e676f6f676c652e706c820b2a2e676f6f676c652e7074820f2a2e676f6f676c65617069732e636e82142a2e676f6f676c65636f6d6d657263652e636f6d82112a2e676f6f676c65766964656f2e636f6d820d2a2e677374617469632e636f6d820a2a2e677674312e636f6d820c2a2e75726368696e2e636f6d82102a2e75726c2e676f6f676c652e636f6d82162a2e796f75747562652d6e6f636f6f6b69652e636f6d820d2a2e796f75747562652e636f6d82162a2e796f7574756265656475636174696f6e2e636f6d820b2a2e7974696d672e636f6d820b616e64726f69642e636f6d8204672e636f8206676f6f2e676c8214676f6f676c652d616e616c79746963732e636f6d820a676f6f676c652e636f6d8212676f6f676c65636f6d6d657263652e636f6d820a75726368696e2e636f6d8208796f7574752e6265820b796f75747562652e636f6d8214796f7574756265656475636174696f6e2e636f6d300b0603551d0f040403020780306806082b06010505070101045c305a302b06082b06010505073002861f687474703a2f2f706b692e676f6f676c652e636f6d2f47494147322e637274302b06082b06010505073001861f687474703a2f2f636c69656e7473312e676f6f676c652e636f6d2f6f637370301d0603551d0e04160414c7fe454ef34cc20a71141af8da468f14a5221172300c0603551d130101ff04023000301f0603551d230418301680144add06161bbcf668b576f581b6bb621aba5a812f30170603551d200410300e300c060a2b06010401d67902050130300603551d1f042930273025a023a021861f687474703a2f2f706b692e676f6f676c652e636f6d2f47494147322e63726c300d06092a864886f70d0101050500038201010000791c2e240d192cb3289c34f2ace10dfd7234ed95584ed756b9e77fbc238ad6a3b3159eb6fda2a250fce2c4b5cca9eff4cd2ade3d0fb616e315f473ad3d2ddecbd01cb91481733bc331eba81dec08fb3ed91b0edd29777d2244fd99d63a1a13bce356831ac7e2e2dcb9fdff7ce3a17a5065d432bee106172fad76f3d460dabb5fb849b8f7547ea4c7d893b44e39f0ea607c5850ce31dccc7ce3f4e3a5d2413d2006e6ebbe9cb460b1f37262615f055885eec9ee05cba89c71ef6a3573e7d03f4886a93d1416cfaf8dbc9f7077dfccebebf9d1741d9dd070cdba112d40c849daa28399bcf1d514c222112db4fb29888f2286e5079169fea7efd4d5d970fd5bae00040830820404308202eca0030201020203023a69300d06092a864886f70d01010505003042310b300906035504061302555331163014060355040a130d47656f547275737420496e632e311b30190603550403131247656f547275737420476c6f62616c204341301e170d3133303430353135313535355a170d3135303430343135313535355a3049310b300906035504061302555331133011060355040a130a476f6f676c6520496e63312530230603550403131c476f6f676c6520496e7465726e657420417574686f7269747920473230820122300d06092a864886f70d01010105000382010f003082010a02820101009c2a04775cd850913a06a382e0d85048bc893ff119701a88467ee08fc5f189ce21ee5afe610db7324489a0740b534f55a4ce826295eeeb595fc6e1058012c45e943fbc5b4838f453f724e6fb91e915c4cff4530df44afc9f54de7dbea06b6f87c0d0501f28300340da0873516c7fff3a3ca737068ebd4b1104eb7d24dee6f9fc3171fb94d560f32e4aaf42d2cbeac46a1ab2cc53dd154b8b1fc819611fcd9da83e632b8435696584c819c54622f85395bee3804a10c62aecba972011c739991004a0f0617a95258c4e5275e2b6ed08ca14fcce226ab34ecf46039797037ec0b1de7baf4533cfba3e71b7def42525c20d35899d9dfb0e1179891e37c5af8e72690203010001a381fb3081f8301f0603551d23041830168014c07a98688d89fbab05640c117daa7d65b8cacc4e301d0603551d0e041604144add06161bbcf668b576f581b6bb621aba5a812f30120603551d130101ff040830060101ff020100300e0603551d0f0101ff040403020106303a0603551d1f04333031302fa02da02b8629687474703a2f2f63726c2e67656f74727573742e636f6d2f63726c732f6774676c6f62616c2e63726c303d06082b060105050701010431302f302d06082b060105050730018621687474703a2f2f6774676c6f62616c2d6f6373702e67656f74727573742e636f6d30170603551d200410300e300c060a2b06010401d679020501300d06092a864886f70d0101050500038201010036d706801127ad2a149b3877b323a07558bbb17e8342ba72da1ed88e360697e0f0953b37fd1b4258fe22c86bbd385ed13b256e12eb5e6776464090da14c8780ded9566da8e866f80a1ba56329586dcdc6aca048c5b7ff6bfcc6f850358c3685113cdfdc8f7793d9935f056a3bde059ed4f4409a39e387af646d11d129d4fbed040fc55fe065e3cda1c56bd96517b6f572adba2aa96dc8c74c295bef06e9513ff17f03cacb2108dcc73fbe88f02c6f0fb33b3953be3c2cb685873dba824623b06359d0da933bd7803902e4c785d503a81d4eea0c87038dcb2f967fa87405d61c0518f6b836bcd053acae1a70578fccada94d02c083d7e1679c8a05020245433710003813082037d308202e6a003020102020312bbe6300d06092a864886f70d0101050500304e310b30090603550406130255533110300e060355040a130745717569666178312d302b060355040b1324457175696661782053656375726520436572746966696361746520417574686f72697479301e170d3032303532313034303030305a170d3138303832313034303030305a3042310b300906035504061302555331163014060355040a130d47656f547275737420496e632e311b30190603550403131247656f547275737420476c6f62616c20434130820122300d06092a864886f70d01010105000382010f003082010a0282010100dacc186330fdf417231a567e5bdf3c6c38e471b77891d4bca1d84cf8a843b603e94d21070888da582f663929bd05788b9d38e805b76a7e71a4e6c460a6b0ef80e489280f9e25d6ed83f3ada691c798c9421835149dad9846922e4fcaf18743c11695572d50ef892d807a57adf2ee5f6bd2008db914f8141535d9c046a37b72c891bfc9552bcdd0973e9c2664ccdfce831971ca4ee6d4d57ba919cd55dec8ecd25e3853e55c4f8c2dfe502336fc66e6cb8ea4391900b7950239910b0efe382ed11d059af64d3e6f0f071daf2c1e8f6039e2fa36531339d45e262bdb3da814bd32eb180328520471e5ab333de138bb073684629c79ea1630f45fc02be8716be4f90203010001a381f03081ed301f0603551d2304183016801448e668f92bd2b295d747d82320104f3398909fd4301d0603551d0e04160414c07a98688d89fbab05640c117daa7d65b8cacc4e300f0603551d130101ff040530030101ff300e0603551d0f0101ff040403020106303a0603551d1f04333031302fa02da02b8629687474703a2f2f63726c2e67656f74727573742e636f6d2f63726c732f73656375726563612e63726c304e0603551d200447304530430604551d2000303b303906082b06010505070201162d68747470733a2f2f7777772e67656f74727573742e636f6d2f7265736f75726365732f7265706f7369746f7279300d06092a864886f70d01010505000381810076e1126e4e4b1612863006b28108cff008c7c7717e66eec2edd43b1ffff0f0c84ed64338b0b9307d18d05583a26acb36119ce84866a36d7fb813d447fe8b5a5c73fcaed91b321938ab973414aa96d2eba31c140849b6bbe591ef8336eb1d566fcadabc736390e47f7b3e22cb3d07ed5f38749ce303504ea1af98ee61f2843f12";
	
	// before-methods here are run after before-methods in superclass (I hope...)
	@Before
	public void setUpClientEntity() {
		params.setEntity(ConnectionEnd.client);
	}
	
	@Test
	public void testCertificate() {
		Certificate cert = Certificate.read(ByteBuffer.wrap(TestUtils.hexToByteArray(TLS_CERT_GOOGLE_HEX)));
		X509Certificate x509 = cert.getCertificate();
		assertEquals(AUTHORITY_DN, x509.getIssuerDN().getName());
	}

	@Test
	public void testHandshakeWithCertificate() {
		HandshakeMessage msg = parseHandshake(TestUtils.hexToByteArray(TLS_HANDSHAKE_PREFIX_HEX+TLS_CERT_GOOGLE_HEX));
		assertTrue(msg instanceof Certificate);
		assertEquals(AUTHORITY_DN, ((Certificate)msg).getCertificate().getIssuerDN().getName());
	}
}
